% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_obj_compare_fun.R
\name{git_object_compare}
\alias{git_object_compare}
\title{Compare two data objects from git commits}
\usage{
git_object_compare(
  data_object = NULL,
  SHA1 = NULL,
  SHA2 = NULL,
  simplify = FALSE
)
}
\arguments{
\item{data_object}{The data object name. Can be left blank to select from .rda options, typed partially or fully, or can be a data object in current environment.}

\item{SHA1}{First commit id. Can be short or long hash. Defaults to NULL (useful for situations where pdata has just been updated and comparison is being done with previous version)}

\item{SHA2}{Second commit id. Can be short or long hash. Defaults to NULL (useful when comparing currently loaded data object with most recent commit in SHA1)}

\item{simplify}{Should the "differences" output contain detailed comparisons? Defaults to FALSE}
}
\value{
a list of:
\item{repo}{The remote repository}
\item{branch}{The current branch}
\item{SHA_1}{First commit ID}
\item{SHA_2}{Second commit ID}
\item{object_name}{Name of the object}
\item{differences}{Output of diffdf}
}
\description{
Compare two data objects from different commits. Ojects are compared through package {diffdf}.
}
\details{
working directory must be pointed to repo clone
}
\section{Last updated by}{

Valeria Duran
}

\section{Last updated date}{

01/25/2023
}

\examples{
with_tempdir({
 ## Create directories and initialize repositories
 path_bare <- tempfile(pattern = "example")
 path_repo_1 <- tempfile(pattern = "example")

 dir.create(path_bare)
 dir.create(path_repo_1)
 repo_bare <- init(path_bare, bare = TRUE)
 ## Clone to repo 1 and config user
 repo_1 <- clone(path_bare, path_repo_1)
 config(repo_1, user.name = "User", user.email = "User@example.org")


 ## Add changes to repo 1 and push to bare
 df <- data.frame(x = c(1:10), y = c(11:20))
 save(df, file = file.path(path_repo_1, "df.rda"))

 add(repo_1, "df.rda")
 commit(repo_1, "data object v1")
 push(repo_1, "origin", "refs/heads/master")
 SHA1 <- last_commit(repo_1)$sha

 df <- data.frame(x = c(1:10), y = c(1:10))
 save(df, file = file.path(path_repo_1, "df.rda"))

 add(repo_1, "df.rda")
 commit(repo_1, "data object v2")
 push(repo_1, "origin", "refs/heads/master")
 SHA2 <- last_commit(repo_1)$sha
 with_dir(path_repo_1, {
   git_object_compare(data_object = "df",
                      SHA1 = SHA1,
                      SHA2 = SHA2)
 })
})
}
